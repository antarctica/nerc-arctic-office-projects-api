---

# = Secret variables
# - Variables are grouped by section in KEY: "value" format (e.g. FOO: "bar")
#   Sensitive values are represented by "[Sensitive]"
##
# > SENTRY_AUTH_TOKEN: "[Sensitive]"
# > SENTRY_DSN: "[Sensitive]"
#
# > SNYK_TOKEN: "[Sensitive]"

stages:
  - build
  - test
  - lint
  - build
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_CERT_PATH: /certs/client
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_VERIFY: 1
  POSTGRES_HOST_AUTH_METHOD: trust
  GITLAB_REGISTRY: docker-registry.data.bas.ac.uk
  POSTGRES_DB: app_test
  POSTGRES_USER: app
  POSTGRES_PASSWORD: "password"
  APP_NAME: arctic-office-projects-api
  SENTRY_ORG: antarctica
  SENTRY_PROJECT: arctic-office-projects-api
  SNYK_ORG: antarctica
  SNYK_PROJECT: arctic-office-projects-api

build:
  stage: build
  tags:
    - dnd
  services:
    - docker:dind
  image: docker:latest
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $GITLAB_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/arctic-office-projects-api:latest -f Dockerfile-ci .
    - docker push $CI_REGISTRY_IMAGE/arctic-office-projects-api:latest
  only:
    - master

image:
  name: $CI_REGISTRY_IMAGE/arctic-office-projects-api:latest

# == Jobs ==

# test-app:
#   stage: test
#   services:
#   - name: postgres:12.12-alpine
#     alias: postgres
#   variables:
#     POSTGRES_DB: runner_db
#     POSTGRES_USER: runner
#     POSTGRES_PASSWORD: password
#     POSTGRES_HOST_AUTH_METHOD: trust
#   before_script:
#     - export FLASK_APP=manage.py
#     - export FLASK_ENV=development
#     - export SQLALCHEMY_DATABASE_URI=postgresql://runner:password@postgres:5432/runner_db
#     - apk add --no-cache postgresql-client
#     - psql -h postgres -U runner -d runner_db -c "ALTER SYSTEM SET listen_addresses TO '*';"
#     - psql -h postgres -U runner -d runner_db -c "SELECT pg_reload_conf();"
#     - psql -h postgres -U runner -d runner_db < docker/init.sql
#   script:
#     - poetry install --no-interaction --no-ansi
#     - poetry run flask db upgrade
#     - poetry run pytest --cov-report=html --cov=arctic_office_projects_api tests
#   only:
#     - master

dependencies-app:
  stage: test
  before_script:
    - "apk add --update nodejs npm"
    - "npm install snyk -g"
    - "poetry install"
  script:
    - "poetry run snyk test"
    - "poetry run snyk monitor --project-name=$SNYK_PROJECT --org=$SNYK_ORG"
  only:
    - master

lint:
  stage: lint
  before_script:
    - "poetry install"
  script:
    - "poetry run flake8 . --ignore=E501 --exclude migrations,.venv"
  only:
    - master

bandit-app:
  stage: lint
  before_script:
    - "poetry install"
  script:
    - "poetry run bandit -r arctic_office_project_api"
  only:
    - master

# sentry:
#   stage: test
#   image:
#     name: getsentry/sentry-cli
#     entrypoint: [""]
#   script:
#     - sentry-cli releases new --finalize $CI_COMMIT_SHA
#     - sentry-cli releases deploys $CI_COMMIT_SHA new -e production
#   only:
#     - tags

package:
  stage: package
  before_script:
    - poetry install --no-interaction --no-ansi
    - poetry config repositories.gitlab $CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/pypi
    - poetry config http-basic.gitlab gitlab-ci-token $CI_JOB_TOKEN --local
    - sed -i "s/^version = .*/version = \"$CI_COMMIT_TAG\"/" pyproject.toml
  script:
    - poetry build
    - poetry publish --no-interaction --repository gitlab
  only:
    - tags
